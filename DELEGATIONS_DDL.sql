  CREATE TABLE "EXPENSES" 
   (	"EXPENSE_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"DELEGATION_ID" NUMBER NOT NULL ENABLE, 
	"EXPENSE_DATE" DATE NOT NULL ENABLE, 
	"EXPENSE_AMOUNT" NUMBER(10,2) NOT NULL ENABLE, 
	"DESCRIPTION" VARCHAR2(200), 
	"FILE_BLOB" BLOB, 
	"EXPENSE_TYPE" VARCHAR2(50), 
	"COUNTRY_3_CODE" CHAR(3), 
	 PRIMARY KEY ("EXPENSE_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "COUNTRIES" 
   (	"COUNTRY_3_CODE" VARCHAR2(3), 
	"COUNTRY_NAME" VARCHAR2(100) NOT NULL ENABLE, 
	"CURRENCY" VARCHAR2(50) DEFAULT 'EUR' NOT NULL ENABLE, 
	 PRIMARY KEY ("COUNTRY_3_CODE")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "DELEGATIONS" 
   (	"DELEGATION_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"EMPLOYEE_ID" NUMBER NOT NULL ENABLE, 
	"START_DATE" DATE NOT NULL ENABLE, 
	"END_DATE" DATE NOT NULL ENABLE, 
	"COUNTRY_3_CODE" VARCHAR2(3) NOT NULL ENABLE, 
	"REPORT_DATE" DATE DEFAULT SYSDATE, 
	"DEL_STATUS" VARCHAR2(30) DEFAULT 'Created', 
	"MENAGER_NOTE" VARCHAR2(4000), 
	 PRIMARY KEY ("DELEGATION_ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "EMPLOYEES" 
   (	"EMPLOYEE_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"FIRST_NAME" VARCHAR2(100), 
	"LAST_NAME" VARCHAR2(100), 
	"EMAIL" VARCHAR2(150) NOT NULL ENABLE, 
	"PASSWORD" VARCHAR2(100) NOT NULL ENABLE, 
	"ROLE" VARCHAR2(20) NOT NULL ENABLE, 
	"LAST_LOGIN" DATE, 
	 CHECK (ROLE IN ('USER', 'MANAGER', 'ADMIN')) ENABLE, 
	 PRIMARY KEY ("EMPLOYEE_ID")
  USING INDEX  ENABLE, 
	 UNIQUE ("EMAIL")
  USING INDEX  ENABLE
   ) ;

  ALTER TABLE "DELEGATIONS" ADD FOREIGN KEY ("EMPLOYEE_ID")
	  REFERENCES "EMPLOYEES" ("EMPLOYEE_ID") ENABLE;
  ALTER TABLE "DELEGATIONS" ADD FOREIGN KEY ("COUNTRY_3_CODE")
	  REFERENCES "COUNTRIES" ("COUNTRY_3_CODE") ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "EMPLOYEES_PASSWORD_HASH" 
BEFORE INSERT OR UPDATE OF password ON employees
FOR EACH ROW
DECLARE
    l_hashed_password VARCHAR2(32);
BEGIN
    IF :NEW.password IS NOT NULL AND (:OLD.password IS NULL OR :NEW.password != :OLD.password) THEN
        l_hashed_password := LOWER(
            RAWTOHEX(DBMS_OBFUSCATION_TOOLKIT.MD5(
                INPUT => UTL_I18N.STRING_TO_RAW(:NEW.password, 'AL32UTF8')
            ))
        );
        :NEW.password := l_hashed_password;
    END IF;
END;
/
ALTER TRIGGER "EMPLOYEES_PASSWORD_HASH" ENABLE;

  ALTER TABLE "EXPENSES" ADD FOREIGN KEY ("DELEGATION_ID")
	  REFERENCES "DELEGATIONS" ("DELEGATION_ID") ENABLE;
create or replace FUNCTION authenticate_employee (
    p_username VARCHAR2,
    p_password VARCHAR2
)
RETURN BOOLEAN
IS
    l_count NUMBER;
    l_hashed_password VARCHAR2(32);
BEGIN
    -- Hashujemy hasło na MD5
    l_hashed_password := LOWER(
        RAWTOHEX(DBMS_OBFUSCATION_TOOLKIT.MD5(
            INPUT => UTL_I18N.STRING_TO_RAW(p_password, 'AL32UTF8')
        ))
    );

    -- Sprawdzamy, czy użytkownik istnieje
    SELECT COUNT(*) INTO l_count
    FROM employees
    WHERE UPPER(email) = UPPER(p_username)
      AND password = l_hashed_password;

    IF l_count > 0 THEN
        BEGIN
            UPDATE employees
            SET last_login = SYSDATE
            WHERE UPPER(email) = UPPER(p_username);
            COMMIT;
        EXCEPTION WHEN OTHERS THEN NULL;
        END;
        RETURN TRUE;
    ELSE
        RETURN FALSE;
    END IF;
END;
/
create or replace FUNCTION custom_auth (
    p_username IN VARCHAR2,
    p_password IN VARCHAR2
) RETURN BOOLEAN
IS
    v_count INTEGER;
BEGIN
    SELECT COUNT(*)
    INTO v_count
    FROM employees
    WHERE UPPER(username) = UPPER(p_username)
      AND password = p_password;

    RETURN v_count > 0;
END;
/














  CREATE UNIQUE INDEX "SYS_C00182260324" ON "EMPLOYEES" ("EMPLOYEE_ID") 
  ;

  CREATE UNIQUE INDEX "SYS_C00182260325" ON "EMPLOYEES" ("EMAIL") 
  ;

  CREATE UNIQUE INDEX "SYS_C00182260374" ON "COUNTRIES" ("COUNTRY_3_CODE") 
  ;

  CREATE UNIQUE INDEX "SYS_C00182260380" ON "DELEGATIONS" ("DELEGATION_ID") 
  ;

  CREATE UNIQUE INDEX "SYS_C00182260388" ON "EXPENSES" ("EXPENSE_ID") 
  ;














































create or replace TRIGGER employees_password_hash
BEFORE INSERT OR UPDATE OF password ON employees
FOR EACH ROW
DECLARE
    l_hashed_password VARCHAR2(32);
BEGIN
    IF :NEW.password IS NOT NULL AND (:OLD.password IS NULL OR :NEW.password != :OLD.password) THEN
        l_hashed_password := LOWER(
            RAWTOHEX(DBMS_OBFUSCATION_TOOLKIT.MD5(
                INPUT => UTL_I18N.STRING_TO_RAW(:NEW.password, 'AL32UTF8')
            ))
        );
        :NEW.password := l_hashed_password;
    END IF;
END;
/

  CREATE OR REPLACE EDITIONABLE TRIGGER "EMPLOYEES_PASSWORD_HASH" 
BEFORE INSERT OR UPDATE OF password ON employees
FOR EACH ROW
DECLARE
    l_hashed_password VARCHAR2(32);
BEGIN
    IF :NEW.password IS NOT NULL AND (:OLD.password IS NULL OR :NEW.password != :OLD.password) THEN
        l_hashed_password := LOWER(
            RAWTOHEX(DBMS_OBFUSCATION_TOOLKIT.MD5(
                INPUT => UTL_I18N.STRING_TO_RAW(:NEW.password, 'AL32UTF8')
            ))
        );
        :NEW.password := l_hashed_password;
    END IF;
END;
/
ALTER TRIGGER "EMPLOYEES_PASSWORD_HASH" ENABLE;

















  CREATE UNIQUE INDEX "SYS_C00182260374" ON "COUNTRIES" ("COUNTRY_3_CODE") 
  ;

  CREATE UNIQUE INDEX "SYS_C00182260380" ON "DELEGATIONS" ("DELEGATION_ID") 
  ;

  CREATE UNIQUE INDEX "SYS_C00182260324" ON "EMPLOYEES" ("EMPLOYEE_ID") 
  ;
  CREATE UNIQUE INDEX "SYS_C00182260325" ON "EMPLOYEES" ("EMAIL") 
  ;

  CREATE OR REPLACE EDITIONABLE TRIGGER "EMPLOYEES_PASSWORD_HASH" 
BEFORE INSERT OR UPDATE OF password ON employees
FOR EACH ROW
DECLARE
    l_hashed_password VARCHAR2(32);
BEGIN
    IF :NEW.password IS NOT NULL AND (:OLD.password IS NULL OR :NEW.password != :OLD.password) THEN
        l_hashed_password := LOWER(
            RAWTOHEX(DBMS_OBFUSCATION_TOOLKIT.MD5(
                INPUT => UTL_I18N.STRING_TO_RAW(:NEW.password, 'AL32UTF8')
            ))
        );
        :NEW.password := l_hashed_password;
    END IF;
END;
/
ALTER TRIGGER "EMPLOYEES_PASSWORD_HASH" ENABLE;

  CREATE UNIQUE INDEX "SYS_C00182260388" ON "EXPENSES" ("EXPENSE_ID") 
  ;
  CREATE UNIQUE INDEX "SYS_IL0416996778C00006$$" ON "EXPENSES" (
  ;





























